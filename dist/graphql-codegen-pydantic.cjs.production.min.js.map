{"version":3,"file":"graphql-codegen-pydantic.cjs.production.min.js","sources":["../src/visitor.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable lines-between-class-members */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable react/no-this-in-sfc */\nimport {\n  BaseVisitor,\n  ParsedConfig,\n  buildScalars,\n  indent,\n} from '@graphql-codegen/visitor-plugin-common';\nimport {\n  NamedTypeNode,\n  ListTypeNode,\n  NonNullTypeNode,\n  GraphQLSchema,\n  FieldDefinitionNode,\n  ObjectTypeDefinitionNode,\n  NameNode,\n  UnionTypeDefinitionNode,\n  DocumentNode,\n  InterfaceTypeDefinitionNode,\n  EnumTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode,\n} from 'graphql';\nimport { DepGraph } from 'dependency-graph';\n\nimport { PydanticPluginRawConfig } from './config';\n\nexport const PYTHON_SCALARS = {\n  ID: 'str',\n  String: 'str',\n  Boolean: 'bool',\n  Int: 'int',\n  Float: 'float',\n};\n\nconst PYTHON_RESERVED = ['from'];\nconst PYDANTIC_MODEL_RESERVED = ['copy'];\nconst RESERVED = PYTHON_RESERVED.concat(PYDANTIC_MODEL_RESERVED);\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PydanticPluginParsedConfig extends ParsedConfig {\n  /* intentionally empty for now */\n}\n\nexport class PydanticVisitor extends BaseVisitor<\n  PydanticPluginRawConfig,\n  PydanticPluginParsedConfig\n> {\n  private addOptionalImport = false;\n  private addAnyImport = false;\n  private addListImport = false;\n  private addUnionImport = false;\n  private addEnumImport = false;\n  private addFieldImport = false;\n\n  private graph = new DepGraph({\n    circular: false,\n  });\n\n  constructor(\n    rawConfig: PydanticPluginRawConfig,\n    private schema: GraphQLSchema,\n  ) {\n    super(rawConfig, {\n      // enumValues: rawConfig.enumValues || {},\n      // listType: rawConfig.listType || 'List',\n      // package: rawConfig.package || defaultPackageName,\n      scalars: buildScalars(schema, {}, PYTHON_SCALARS),\n    });\n  }\n\n  public getImports(): string {\n    const typing = [];\n    const pydantic = ['BaseModel'];\n\n    if (this.addAnyImport) {\n      typing.push(`Any`);\n    }\n\n    if (this.addOptionalImport) {\n      typing.push(`Optional`);\n    }\n\n    if (this.addListImport) {\n      typing.push(`List`);\n    }\n\n    if (this.addUnionImport) {\n      typing.push(`Union`);\n    }\n\n    if (this.addFieldImport) {\n      pydantic.push(`Field`);\n    }\n\n    const enumInput = this.addEnumImport ? 'from enum import Enum' : '';\n\n    const typingImport = typing.length\n      ? `from typing import ${typing.join(', ')}`\n      : '';\n\n    const pydanticImport = pydantic.length\n      ? `from pydantic import ${pydantic.join(', ')}`\n      : '';\n\n    return [enumInput, typingImport, pydanticImport].filter(i => i).join('\\n');\n  }\n\n  protected canAddGraphNode(id: string): boolean {\n    if (Object.values(this.scalars).includes(id) || id === 'Any') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected upsertGraphNode(id: string) {\n    if (this.canAddGraphNode(id) && !this.graph.hasNode(id)) {\n      this.graph.addNode(id);\n    }\n  }\n\n  protected addGraphNodeDeps(id: string, ids: string[]) {\n    if (!this.canAddGraphNode(id)) {\n      return;\n    }\n\n    this.upsertGraphNode(id);\n\n    ids.forEach((i: string) => {\n      if (!this.canAddGraphNode(i)) {\n        return;\n      }\n\n      this.upsertGraphNode(i);\n\n      this.graph.addDependency(id, i);\n    });\n  }\n\n  protected clearOptional(str: string): string {\n    if (str.startsWith('Optional[')) {\n      return str.replace(/Optional\\[(.*?)\\]$/, '$1');\n    }\n\n    return str;\n  }\n\n  Name(node: NameNode) {\n    return node.value;\n  }\n\n  NamedType(node: NamedTypeNode) {\n    const { name } = node as any;\n\n    // Scalars\n    if (Object.keys(this.scalars).includes(name)) {\n      const id = this.scalars[name];\n\n      // Special case for any\n      if (id === 'any') {\n        this.addAnyImport = true;\n        return {\n          id: 'Any',\n          source: 'Any',\n        };\n      }\n\n      this.addOptionalImport = true;\n      return {\n        id,\n        source: `Optional[${id}]`,\n      };\n    }\n\n    // Defined\n    this.addOptionalImport = true;\n    return {\n      id: name,\n      source: `Optional['${name}']`,\n    };\n  }\n\n  ListType(node: ListTypeNode) {\n    this.addListImport = true;\n    this.addOptionalImport = true;\n\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: `Optional[List[${type.source}]]`,\n    };\n  }\n\n  NonNullType(node: NonNullTypeNode) {\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: this.clearOptional(type.source),\n    };\n  }\n\n  protected visitFieldOrInputDefinition(node: any) {\n    const argName = node.name as any;\n\n    const { type, directives } = node as any;\n\n    // Handle deprecated\n    const ds = directives.map((d: any) => d.name);\n    if (ds.includes('deprecated')) {\n      return null;\n    }\n\n    // Need to alias some field names\n    // Otherwise pydantic throws\n    if (RESERVED.includes(argName)) {\n      this.addFieldImport = true;\n      return {\n        id: type.id,\n        source: indent(\n          `${argName}_: ${type.source} = Field(None, alias='${argName}')`,\n          2,\n        ),\n      };\n    }\n\n    return {\n      id: type.id,\n      source: indent(`${argName}: ${type.source}`, 2),\n    };\n  }\n\n  FieldDefinition(node: FieldDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  InputValueDefinition(node: InputValueDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  EnumTypeDefinition(node: EnumTypeDefinitionNode) {\n    this.addEnumImport = true;\n\n    const { name, values } = node as any;\n\n    const val = values\n      .map((v: any) => indent(`${v.name} = '${v.name}'`, 2))\n      .join('\\n');\n    const source = `class ${name}(str, Enum):\\n${val}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  UnionTypeDefinition(node: UnionTypeDefinitionNode) {\n    this.addUnionImport = true;\n\n    const { name, types } = node as any;\n\n    const unionTypes = (types ?? []).map((t: any) =>\n      this.clearOptional(t.source),\n    );\n\n    this.addGraphNodeDeps(\n      name,\n      types.map((t: any) => t.id),\n    );\n\n    return {\n      id: name,\n      source: `${name} = Union[${unionTypes.join(', ')}]`,\n    };\n  }\n\n  InterfaceTypeDefinition(node: InterfaceTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.addGraphNodeDeps(\n      name,\n      fields.map((f: any) => f.id),\n    );\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  ObjectTypeDefinition(node: ObjectTypeDefinitionNode) {\n    const { name, fields: rawFields, interfaces: rawInterfaces } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const interfaces = rawInterfaces.map((n: any) =>\n      this.clearOptional(n.source).replace(/'/g, ''),\n    );\n\n    const impl = interfaces.length ? interfaces.join(', ') : 'BaseModel';\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(${impl}):\\n${args}`;\n\n    if (interfaces.length) {\n      this.addGraphNodeDeps(name, interfaces);\n    } else {\n      this.upsertGraphNode(name);\n    }\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  InputObjectTypeDefinition(node: InputObjectTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  Document(node: DocumentNode) {\n    const { definitions } = node as any;\n\n    const nodesInOrder = this.graph.overallOrder();\n\n    return nodesInOrder\n      .map((n: any) => definitions.find((d: any) => d.id === n)?.source || '')\n      .join('\\n\\n\\n');\n  }\n}\n","import { parse, GraphQLSchema, printSchema, visit } from 'graphql';\nimport { PluginFunction, Types } from '@graphql-codegen/plugin-helpers';\n\nimport { PydanticVisitor } from './visitor';\nimport { PydanticPluginRawConfig } from './config';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const plugin: PluginFunction<PydanticPluginRawConfig> = async (\n  schema: GraphQLSchema,\n  documents: Types.DocumentFile[],\n  config: PydanticPluginRawConfig,\n  info,\n): Promise<string> => {\n  const visitor = new PydanticVisitor(config, schema);\n  const printedSchema = printSchema(schema);\n  const astNode = parse(printedSchema);\n\n  const visitorResult = visit(astNode, { leave: visitor as any });\n  const imports = visitor.getImports();\n\n  return `${imports}\\n\\n\\n${visitorResult}\\n`;\n};\n"],"names":["PYTHON_SCALARS","ID","String","Boolean","Int","Float","RESERVED","concat","PydanticVisitor","BaseVisitor","constructor","rawConfig","schema","scalars","buildScalars","DepGraph","circular","getImports","typing","pydantic","this","addAnyImport","push","addOptionalImport","addListImport","addUnionImport","addFieldImport","addEnumImport","length","join","filter","i","canAddGraphNode","id","Object","values","includes","upsertGraphNode","graph","hasNode","addNode","addGraphNodeDeps","ids","forEach","addDependency","clearOptional","str","startsWith","replace","Name","node","value","NamedType","name","keys","source","ListType","type","NonNullType","visitFieldOrInputDefinition","argName","directives","map","d","indent","FieldDefinition","InputValueDefinition","EnumTypeDefinition","v","UnionTypeDefinition","types","unionTypes","t","InterfaceTypeDefinition","fields","rawFields","f","ObjectTypeDefinition","interfaces","rawInterfaces","n","InputObjectTypeDefinition","Document","definitions","overallOrder","find","async","documents","config","info","visitor","printedSchema","printSchema","astNode","parse","visitorResult","visit","leave"],"mappings":"+KA4BO,MAAMA,EAAiB,CAC5BC,GAAI,MACJC,OAAQ,MACRC,QAAS,OACTC,IAAK,MACLC,MAAO,SAKHC,EAFkB,CAAC,QAEQC,OADD,CAAC,eAQpBC,UAAwBC,cAenCC,YACEC,EACQC,SAEFD,EAAW,CAIfE,QAASC,eAAaF,EAAQ,GAAIZ,iBAN5BY,0BAbkB,qBACL,sBACC,uBACC,sBACD,uBACC,aAET,IAAIG,WAAS,CAC3BC,UAAU,IAeLC,mBACCC,EAAS,GACTC,EAAW,CAAC,oBAEdC,KAAKC,cACPH,EAAOI,YAGLF,KAAKG,mBACPL,EAAOI,iBAGLF,KAAKI,eACPN,EAAOI,aAGLF,KAAKK,gBACPP,EAAOI,cAGLF,KAAKM,gBACPP,EAASG,cAaJ,CAVWF,KAAKO,cAAgB,wBAA0B,GAE5CT,EAAOU,6BACFV,EAAOW,KAAK,MAClC,GAEmBV,EAASS,+BACJT,EAASU,KAAK,MACtC,IAE6CC,OAAOC,GAAKA,GAAGF,KAAK,MAG7DG,gBAAgBC,UACpBC,OAAOC,OAAOf,KAAKP,SAASuB,SAASH,IAAc,QAAPA,EAOxCI,gBAAgBJ,GACpBb,KAAKY,gBAAgBC,KAAQb,KAAKkB,MAAMC,QAAQN,SAC7CK,MAAME,QAAQP,GAIbQ,iBAAiBR,EAAYS,GAChCtB,KAAKY,gBAAgBC,UAIrBI,gBAAgBJ,GAErBS,EAAIC,QAASZ,IACNX,KAAKY,gBAAgBD,UAIrBM,gBAAgBN,QAEhBO,MAAMM,cAAcX,EAAIF,OAIvBc,cAAcC,UAClBA,EAAIC,WAAW,aACVD,EAAIE,QAAQ,qBAAsB,MAGpCF,EAGTG,KAAKC,UACIA,EAAKC,MAGdC,UAAUF,SACFG,KAAEA,GAASH,KAGbhB,OAAOoB,KAAKlC,KAAKP,SAASuB,SAASiB,GAAO,OACtCpB,EAAKb,KAAKP,QAAQwC,SAGb,QAAPpB,QACGZ,cAAe,EACb,CACLY,GAAI,MACJsB,OAAQ,cAIPhC,mBAAoB,EAClB,CACLU,GAAAA,EACAsB,mBAAoBtB,mBAKnBV,mBAAoB,EAClB,CACLU,GAAIoB,EACJE,oBAAqBF,OAIzBG,SAASN,QACF1B,eAAgB,OAChBD,mBAAoB,QAEnBkC,KAAEA,GAASP,QAEV,CACLjB,GAAIwB,EAAKxB,GACTsB,wBAAyBE,EAAKF,YAIlCG,YAAYR,SACJO,KAAEA,GAASP,QAEV,CACLjB,GAAIwB,EAAKxB,GACTsB,OAAQnC,KAAKyB,cAAcY,EAAKF,SAI1BI,4BAA4BT,SAC9BU,EAAUV,EAAKG,MAEfI,KAAEA,EAAFI,WAAQA,GAAeX,SAGlBW,EAAWC,IAAKC,GAAWA,EAAEV,MACjCjB,SAAS,cACP,KAKL9B,EAAS8B,SAASwB,SACflC,gBAAiB,EACf,CACLO,GAAIwB,EAAKxB,GACTsB,OAAQS,YACHJ,OAAaH,EAAKF,+BAA+BK,MACpD,KAKC,CACL3B,GAAIwB,EAAKxB,GACTsB,OAAQS,YAAUJ,MAAYH,EAAKF,SAAU,IAIjDU,gBAAgBf,UACP9B,KAAKuC,4BAA4BT,GAG1CgB,qBAAqBhB,UACZ9B,KAAKuC,4BAA4BT,GAG1CiB,mBAAmBjB,QACZvB,eAAgB,QAEf0B,KAAEA,EAAFlB,OAAQA,GAAWe,EAKnBK,WAAkBF,kBAHZlB,EACT2B,IAAKM,GAAWJ,YAAUI,EAAEf,WAAWe,EAAEf,QAAS,IAClDxB,KAAK,oBAGHQ,gBAAgBgB,GAEd,CACLpB,GAAIoB,EACJE,OAAAA,GAIJc,oBAAoBnB,QACbzB,gBAAiB,QAEhB4B,KAAEA,EAAFiB,MAAQA,GAAUpB,EAElBqB,SAAcD,EAAAA,EAAS,IAAIR,IAAKU,GACpCpD,KAAKyB,cAAc2B,EAAEjB,qBAGlBd,iBACHY,EACAiB,EAAMR,IAAKU,GAAWA,EAAEvC,KAGnB,CACLA,GAAIoB,EACJE,UAAWF,aAAgBkB,EAAW1C,KAAK,UAI/C4C,wBAAwBvB,SAChBG,KAAEA,EAAMqB,OAAQC,GAAczB,EAE9BwB,EAASC,EAAU7C,OAAQ8C,GAAWA,GAGtCrB,WAAkBF,kBADXqB,EAAOZ,IAAKc,GAAWA,EAAErB,QAAQ1B,KAAK,oBAG9CY,iBACHY,EACAqB,EAAOZ,IAAKc,GAAWA,EAAE3C,KAGpB,CACLA,GAAIoB,EACJE,OAAAA,GAIJsB,qBAAqB3B,SACbG,KAAEA,EAAMqB,OAAQC,EAAWG,WAAYC,GAAkB7B,EAEzDwB,EAASC,EAAU7C,OAAQ8C,GAAWA,GAEtCE,EAAaC,EAAcjB,IAAKkB,GACpC5D,KAAKyB,cAAcmC,EAAEzB,QAAQP,QAAQ,KAAM,KAMvCO,WAAkBF,KAHXyB,EAAWlD,OAASkD,EAAWjD,KAAK,MAAQ,kBAE5C6C,EAAOZ,IAAKc,GAAWA,EAAErB,QAAQ1B,KAAK,eAG/CiD,EAAWlD,YACRa,iBAAiBY,EAAMyB,QAEvBzC,gBAAgBgB,GAGhB,CACLpB,GAAIoB,EACJE,OAAAA,GAIJ0B,0BAA0B/B,SAClBG,KAAEA,EAAMqB,OAAQC,GAAczB,EAK9BK,WAAkBF,kBAHTsB,EAAU7C,OAAQ8C,GAAWA,GAExBd,IAAKc,GAAWA,EAAErB,QAAQ1B,KAAK,oBAG9CQ,gBAAgBgB,GAEd,CACLpB,GAAIoB,EACJE,OAAAA,GAIJ2B,SAAShC,SACDiC,YAAEA,GAAgBjC,SAEH9B,KAAKkB,MAAM8C,eAG7BtB,IAAKkB,0BAAWG,EAAYE,KAAMtB,GAAWA,EAAE9B,KAAO+C,aAAIzB,SAAU,KACpE1B,KAAK,0BCtVmDyD,MAC7D1E,EACA2E,EACAC,EACAC,WAEMC,EAAU,IAAIlF,EAAgBgF,EAAQ5E,GACtC+E,EAAgBC,cAAYhF,GAC5BiF,EAAUC,QAAMH,GAEhBI,EAAgBC,QAAMH,EAAS,CAAEI,MAAOP,aAC9BA,EAAQzE,qBAEE8E"}