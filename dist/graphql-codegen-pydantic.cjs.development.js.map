{"version":3,"file":"graphql-codegen-pydantic.cjs.development.js","sources":["../src/visitor.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable lines-between-class-members */\n/* eslint-disable class-methods-use-this */\n/* eslint-disable react/no-this-in-sfc */\nimport {\n  BaseVisitor,\n  ParsedConfig,\n  buildScalars,\n  indent,\n} from '@graphql-codegen/visitor-plugin-common';\nimport {\n  NamedTypeNode,\n  ListTypeNode,\n  NonNullTypeNode,\n  GraphQLSchema,\n  FieldDefinitionNode,\n  ObjectTypeDefinitionNode,\n  NameNode,\n  UnionTypeDefinitionNode,\n  DocumentNode,\n  InterfaceTypeDefinitionNode,\n  EnumTypeDefinitionNode,\n  InputObjectTypeDefinitionNode,\n  InputValueDefinitionNode,\n} from 'graphql';\nimport { DepGraph } from 'dependency-graph';\n\nimport { PydanticPluginRawConfig } from './config';\n\nexport const PYTHON_SCALARS = {\n  ID: 'str',\n  String: 'str',\n  Boolean: 'bool',\n  Int: 'int',\n  Float: 'float',\n};\n\nconst PYTHON_RESERVED = ['from'];\nconst PYDANTIC_MODEL_RESERVED = ['copy'];\nconst RESERVED = PYTHON_RESERVED.concat(PYDANTIC_MODEL_RESERVED);\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PydanticPluginParsedConfig extends ParsedConfig {\n  /* intentionally empty for now */\n}\n\nexport class PydanticVisitor extends BaseVisitor<\n  PydanticPluginRawConfig,\n  PydanticPluginParsedConfig\n> {\n  private addOptionalImport = false;\n  private addAnyImport = false;\n  private addListImport = false;\n  private addUnionImport = false;\n  private addEnumImport = false;\n  private addFieldImport = false;\n\n  private graph = new DepGraph({\n    circular: false,\n  });\n\n  constructor(\n    rawConfig: PydanticPluginRawConfig,\n    private schema: GraphQLSchema,\n  ) {\n    super(rawConfig, {\n      // enumValues: rawConfig.enumValues || {},\n      // listType: rawConfig.listType || 'List',\n      // package: rawConfig.package || defaultPackageName,\n      scalars: buildScalars(schema, {}, PYTHON_SCALARS),\n    });\n  }\n\n  public getImports(): string {\n    const typing = [];\n    const pydantic = ['BaseModel'];\n\n    if (this.addAnyImport) {\n      typing.push(`Any`);\n    }\n\n    if (this.addOptionalImport) {\n      typing.push(`Optional`);\n    }\n\n    if (this.addListImport) {\n      typing.push(`List`);\n    }\n\n    if (this.addUnionImport) {\n      typing.push(`Union`);\n    }\n\n    if (this.addFieldImport) {\n      pydantic.push(`Field`);\n    }\n\n    const enumInput = this.addEnumImport ? 'from enum import Enum' : '';\n\n    const typingImport = typing.length\n      ? `from typing import ${typing.join(', ')}`\n      : '';\n\n    const pydanticImport = pydantic.length\n      ? `from pydantic import ${pydantic.join(', ')}`\n      : '';\n\n    return [enumInput, typingImport, pydanticImport].filter(i => i).join('\\n');\n  }\n\n  protected canAddGraphNode(id: string): boolean {\n    if (Object.values(this.scalars).includes(id) || id === 'Any') {\n      return false;\n    }\n\n    return true;\n  }\n\n  protected upsertGraphNode(id: string) {\n    if (this.canAddGraphNode(id) && !this.graph.hasNode(id)) {\n      this.graph.addNode(id);\n    }\n  }\n\n  protected addGraphNodeDeps(id: string, ids: string[]) {\n    if (!this.canAddGraphNode(id)) {\n      return;\n    }\n\n    this.upsertGraphNode(id);\n\n    ids.forEach((i: string) => {\n      if (!this.canAddGraphNode(i)) {\n        return;\n      }\n\n      this.upsertGraphNode(i);\n\n      this.graph.addDependency(id, i);\n    });\n  }\n\n  protected clearOptional(str: string): string {\n    if (str.startsWith('Optional[')) {\n      return str.replace(/Optional\\[(.*?)\\]$/, '$1');\n    }\n\n    return str;\n  }\n\n  Name(node: NameNode) {\n    return node.value;\n  }\n\n  NamedType(node: NamedTypeNode) {\n    const { name } = node as any;\n\n    // Scalars\n    if (Object.keys(this.scalars).includes(name)) {\n      const id = this.scalars[name];\n\n      // Special case for any\n      if (id === 'any') {\n        this.addAnyImport = true;\n        return {\n          id: 'Any',\n          source: 'Any',\n        };\n      }\n\n      this.addOptionalImport = true;\n      return {\n        id,\n        source: `Optional[${id}]`,\n      };\n    }\n\n    // Defined\n    this.addOptionalImport = true;\n    return {\n      id: name,\n      source: `Optional['${name}']`,\n    };\n  }\n\n  ListType(node: ListTypeNode) {\n    this.addListImport = true;\n    this.addOptionalImport = true;\n\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: `Optional[List[${type.source}]]`,\n    };\n  }\n\n  NonNullType(node: NonNullTypeNode) {\n    const { type } = node as any;\n\n    return {\n      id: type.id,\n      source: this.clearOptional(type.source),\n    };\n  }\n\n  protected visitFieldOrInputDefinition(node: any) {\n    const argName = node.name as any;\n\n    const { type, directives } = node as any;\n\n    // Handle deprecated\n    const ds = directives.map((d: any) => d.name);\n    if (ds.includes('deprecated')) {\n      return null;\n    }\n\n    // Need to alias some field names\n    // Otherwise pydantic throws\n    if (RESERVED.includes(argName)) {\n      this.addFieldImport = true;\n      return {\n        id: type.id,\n        source: indent(\n          `${argName}_: ${type.source} = Field(None, alias='${argName}')`,\n          2,\n        ),\n      };\n    }\n\n    return {\n      id: type.id,\n      source: indent(`${argName}: ${type.source}`, 2),\n    };\n  }\n\n  FieldDefinition(node: FieldDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  InputValueDefinition(node: InputValueDefinitionNode) {\n    return this.visitFieldOrInputDefinition(node);\n  }\n\n  EnumTypeDefinition(node: EnumTypeDefinitionNode) {\n    this.addEnumImport = true;\n\n    const { name, values } = node as any;\n\n    const val = values\n      .map((v: any) => indent(`${v.name} = '${v.name}'`, 2))\n      .join('\\n');\n    const source = `class ${name}(str, Enum):\\n${val}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  UnionTypeDefinition(node: UnionTypeDefinitionNode) {\n    this.addUnionImport = true;\n\n    const { name, types } = node as any;\n\n    const unionTypes = (types ?? []).map((t: any) =>\n      this.clearOptional(t.source),\n    );\n\n    this.addGraphNodeDeps(\n      name,\n      types.map((t: any) => t.id),\n    );\n\n    return {\n      id: name,\n      source: `${name} = Union[${unionTypes.join(', ')}]`,\n    };\n  }\n\n  InterfaceTypeDefinition(node: InterfaceTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.addGraphNodeDeps(\n      name,\n      fields.map((f: any) => f.id),\n    );\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  ObjectTypeDefinition(node: ObjectTypeDefinitionNode) {\n    const { name, fields: rawFields, interfaces: rawInterfaces } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const interfaces = rawInterfaces.map((n: any) =>\n      this.clearOptional(n.source).replace(/'/g, ''),\n    );\n\n    const impl = interfaces.length ? interfaces.join(', ') : 'BaseModel';\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(${impl}):\\n${args}`;\n\n    if (interfaces.length) {\n      this.addGraphNodeDeps(name, interfaces);\n    } else {\n      this.upsertGraphNode(name);\n    }\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  InputObjectTypeDefinition(node: InputObjectTypeDefinitionNode) {\n    const { name, fields: rawFields } = node as any;\n\n    const fields = rawFields.filter((f: any) => f);\n\n    const args = fields.map((f: any) => f.source).join('\\n');\n    const source = `class ${name}(BaseModel):\\n${args}`;\n\n    this.upsertGraphNode(name);\n\n    return {\n      id: name,\n      source,\n    };\n  }\n\n  Document(node: DocumentNode) {\n    const { definitions } = node as any;\n\n    const nodesInOrder = this.graph.overallOrder();\n\n    return nodesInOrder\n      .map((n: any) => definitions.find((d: any) => d.id === n)?.source || '')\n      .join('\\n\\n\\n');\n  }\n}\n","import { parse, GraphQLSchema, printSchema, visit } from 'graphql';\nimport { PluginFunction, Types } from '@graphql-codegen/plugin-helpers';\n\nimport { PydanticVisitor } from './visitor';\nimport { PydanticPluginRawConfig } from './config';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const plugin: PluginFunction<PydanticPluginRawConfig> = async (\n  schema: GraphQLSchema,\n  documents: Types.DocumentFile[],\n  config: PydanticPluginRawConfig,\n  info,\n): Promise<string> => {\n  const visitor = new PydanticVisitor(config, schema);\n  const printedSchema = printSchema(schema);\n  const astNode = parse(printedSchema);\n\n  const visitorResult = visit(astNode, { leave: visitor as any });\n  const imports = visitor.getImports();\n\n  return `${imports}\\n\\n\\n${visitorResult}\\n`;\n};\n"],"names":["PYTHON_SCALARS","ID","String","Boolean","Int","Float","PYTHON_RESERVED","PYDANTIC_MODEL_RESERVED","RESERVED","concat","PydanticVisitor","BaseVisitor","constructor","rawConfig","schema","scalars","buildScalars","DepGraph","circular","getImports","typing","pydantic","addAnyImport","push","addOptionalImport","addListImport","addUnionImport","addFieldImport","enumInput","addEnumImport","typingImport","length","join","pydanticImport","filter","i","canAddGraphNode","id","Object","values","includes","upsertGraphNode","graph","hasNode","addNode","addGraphNodeDeps","ids","forEach","addDependency","clearOptional","str","startsWith","replace","Name","node","value","NamedType","name","keys","source","ListType","type","NonNullType","visitFieldOrInputDefinition","argName","directives","ds","map","d","indent","FieldDefinition","InputValueDefinition","EnumTypeDefinition","val","v","UnionTypeDefinition","types","unionTypes","t","InterfaceTypeDefinition","fields","rawFields","f","args","ObjectTypeDefinition","interfaces","rawInterfaces","n","impl","InputObjectTypeDefinition","Document","definitions","nodesInOrder","overallOrder","find","plugin","documents","config","info","visitor","printedSchema","printSchema","astNode","parse","visitorResult","visit","leave","imports"],"mappings":"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"}