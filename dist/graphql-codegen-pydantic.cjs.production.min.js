"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("graphql"),e=require("@graphql-codegen/visitor-plugin-common"),i=require("dependency-graph");const n={ID:"str",String:"str",Boolean:"bool",Int:"int",Float:"float"},r=["from"].concat(["copy"]);class s extends e.BaseVisitor{constructor(t,r){super(t,{scalars:e.buildScalars(r,{},n)}),this.schema=r,this.addOptionalImport=!1,this.addAnyImport=!1,this.addListImport=!1,this.addUnionImport=!1,this.addEnumImport=!1,this.addFieldImport=!1,this.graph=new i.DepGraph({circular:!1})}getImports(){const t=[],e=["BaseModel"];return this.addAnyImport&&t.push("Any"),this.addOptionalImport&&t.push("Optional"),this.addListImport&&t.push("List"),this.addUnionImport&&t.push("Union"),this.addFieldImport&&e.push("Field"),[this.addEnumImport?"from enum import StrEnum":"",t.length?"from typing import "+t.join(", "):"",e.length?"from pydantic import "+e.join(", "):""].filter(t=>t).join("\n")}canAddGraphNode(t){return!Object.values(this.scalars).includes(t)&&"Any"!==t}upsertGraphNode(t){this.canAddGraphNode(t)&&!this.graph.hasNode(t)&&this.graph.addNode(t)}addGraphNodeDeps(t,e){this.canAddGraphNode(t)&&(this.upsertGraphNode(t),e.forEach(e=>{this.canAddGraphNode(e)&&(this.upsertGraphNode(e),this.graph.addDependency(t,e))}))}clearOptional(t){return t.startsWith("Optional[")?t.replace(/Optional\[(.*?)\]$/,"$1"):t}Name(t){return t.value}NamedType(t){const{name:e}=t;if(Object.keys(this.scalars).includes(e)){const t=this.scalars[e];return"any"===t?(this.addAnyImport=!0,{id:"Any",source:"Any"}):(this.addOptionalImport=!0,{id:t,source:`Optional[${t}]`})}return this.addOptionalImport=!0,{id:e,source:`Optional['${e}']`}}ListType(t){this.addListImport=!0,this.addOptionalImport=!0;const{type:e}=t;return{id:e.id,source:`Optional[List[${e.source}]]`}}NonNullType(t){const{type:e}=t;return{id:e.id,source:this.clearOptional(e.source)}}visitFieldOrInputDefinition(t){const i=t.name,{type:n}=t;return r.includes(i)?(this.addFieldImport=!0,{id:n.id,source:e.indent(`${i}_: ${n.source} = Field(None, alias='${i}')`,2)}):{id:n.id,source:e.indent(`${i}: ${n.source}`,2)}}FieldDefinition(t){return this.visitFieldOrInputDefinition(t)}InputValueDefinition(t){return this.visitFieldOrInputDefinition(t)}EnumTypeDefinition(t){this.addEnumImport=!0;const{name:i,values:n}=t,r=`class ${i}(StrEnum):\n${n.map(t=>e.indent(`${t.name} = '${t.name}'`,2)).join("\n")}`;return this.upsertGraphNode(i),{id:i,source:r}}UnionTypeDefinition(t){this.addUnionImport=!0;const{name:e,types:i}=t,n=(null!=i?i:[]).map(t=>this.clearOptional(t.source));return this.addGraphNodeDeps(e,i.map(t=>t.id)),{id:e,source:`${e} = Union[${n.join(", ")}]`}}InterfaceTypeDefinition(t){const{name:e,fields:i}=t,n=i.filter(t=>t),r=`class ${e}(BaseModel):\n${n.map(t=>t.source).join("\n")}`;return this.addGraphNodeDeps(e,n.map(t=>t.id)),{id:e,source:r}}ObjectTypeDefinition(t){const{name:e,fields:i,interfaces:n}=t,r=i.filter(t=>t),s=n.map(t=>this.clearOptional(t.source).replace(/'/g,"")),o=`class ${e}(${s.length?s.join(", "):"BaseModel"}):\n${r.map(t=>t.source).join("\n")}`;return s.length?this.addGraphNodeDeps(e,s):this.upsertGraphNode(e),{id:e,source:o}}InputObjectTypeDefinition(t){const{name:e,fields:i}=t,n=`class ${e}(BaseModel):\n${i.filter(t=>t).map(t=>t.source).join("\n")}`;return this.upsertGraphNode(e),{id:e,source:n}}Document(t){const{definitions:e}=t;return this.graph.overallOrder().map(t=>{var i;return(null==(i=e.find(e=>e.id===t))?void 0:i.source)||""}).join("\n\n\n")}}exports.plugin=async(e,i,n,r)=>{const o=new s(n,e),a=t.printSchema(e),d=t.parse(a),p=t.visit(d,{leave:o});return`${o.getImports()}\n\n\n${p}\n`};
//# sourceMappingURL=graphql-codegen-pydantic.cjs.production.min.js.map
