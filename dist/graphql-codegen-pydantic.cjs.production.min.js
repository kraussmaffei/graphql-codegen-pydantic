"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("graphql"),t=require("@graphql-codegen/visitor-plugin-common"),i=require("dependency-graph");const n={ID:"str",String:"str",Boolean:"bool",Int:"int",Float:"float"},r=["from"].concat(["copy"]);class s extends t.BaseVisitor{constructor(e,r){super(e,{scalars:t.buildScalars(r,{},n)}),this.schema=r,this.addOptionalImport=!1,this.addAnyImport=!1,this.addListImport=!1,this.addUnionImport=!1,this.addEnumImport=!1,this.addFieldImport=!1,this.graph=new i.DepGraph({circular:!1})}getImports(){const e=[],t=["BaseModel"];return this.addAnyImport&&e.push("Any"),this.addOptionalImport&&e.push("Optional"),this.addListImport&&e.push("List"),this.addUnionImport&&e.push("Union"),this.addFieldImport&&t.push("Field"),[this.addEnumImport?"from enum import Enum":"",e.length?"from typing import "+e.join(", "):"",t.length?"from pydantic import "+t.join(", "):""].filter(e=>e).join("\n")}canAddGraphNode(e){return!Object.values(this.scalars).includes(e)&&"Any"!==e}upsertGraphNode(e){this.canAddGraphNode(e)&&!this.graph.hasNode(e)&&this.graph.addNode(e)}addGraphNodeDeps(e,t){this.canAddGraphNode(e)&&(this.upsertGraphNode(e),t.forEach(t=>{this.canAddGraphNode(t)&&(this.upsertGraphNode(t),this.graph.addDependency(e,t))}))}clearOptional(e){return e.startsWith("Optional[")?e.replace(/Optional\[(.*?)\]$/,"$1"):e}Name(e){return e.value}NamedType(e){const{name:t}=e;if(Object.keys(this.scalars).includes(t)){const e=this.scalars[t];return"any"===e?(this.addAnyImport=!0,{id:"Any",source:"Any"}):(this.addOptionalImport=!0,{id:e,source:`Optional[${e}]`})}return this.addOptionalImport=!0,{id:t,source:`Optional['${t}']`}}ListType(e){this.addListImport=!0,this.addOptionalImport=!0;const{type:t}=e;return{id:t.id,source:`Optional[List[${t.source}]]`}}NonNullType(e){const{type:t}=e;return{id:t.id,source:this.clearOptional(t.source)}}visitFieldOrInputDefinition(e){const i=e.name,{type:n}=e;return r.includes(i)?(this.addFieldImport=!0,{id:n.id,source:t.indent(`${i}_: ${n.source} = Field(None, alias='${i}')`,2)}):{id:n.id,source:t.indent(`${i}: ${n.source}`,2)}}FieldDefinition(e){return this.visitFieldOrInputDefinition(e)}InputValueDefinition(e){return this.visitFieldOrInputDefinition(e)}EnumTypeDefinition(e){this.addEnumImport=!0;const{name:i,values:n}=e,r=`class ${i}(str, Enum):\n${n.map(e=>t.indent(`${e.name} = '${e.name}'`,2)).join("\n")}`;return this.upsertGraphNode(i),{id:i,source:r}}UnionTypeDefinition(e){this.addUnionImport=!0;const{name:t,types:i}=e,n=(null!=i?i:[]).map(e=>this.clearOptional(e.source));return this.addGraphNodeDeps(t,i.map(e=>e.id)),{id:t,source:`${t} = Union[${n.join(", ")}]`}}InterfaceTypeDefinition(e){const{name:t,fields:i}=e,n=i.filter(e=>e),r=`class ${t}(BaseModel):\n${n.map(e=>e.source).join("\n")}`;return this.addGraphNodeDeps(t,n.map(e=>e.id)),{id:t,source:r}}ObjectTypeDefinition(e){const{name:t,fields:i,interfaces:n}=e,r=i.filter(e=>e),s=n.map(e=>this.clearOptional(e.source).replace(/'/g,"")),o=`class ${t}(${s.length?s.join(", "):"BaseModel"}):\n${r.map(e=>e.source).join("\n")}`;return s.length?this.addGraphNodeDeps(t,s):this.upsertGraphNode(t),{id:t,source:o}}InputObjectTypeDefinition(e){const{name:t,fields:i}=e,n=`class ${t}(BaseModel):\n${i.filter(e=>e).map(e=>e.source).join("\n")}`;return this.upsertGraphNode(t),{id:t,source:n}}Document(e){const{definitions:t}=e;return this.graph.overallOrder().map(e=>{var i;return(null==(i=t.find(t=>t.id===e))?void 0:i.source)||""}).join("\n\n\n")}}exports.plugin=async(t,i,n,r)=>{const o=new s(n,t),a=e.printSchema(t),d=e.parse(a),p=e.visit(d,{leave:o});return`${o.getImports()}\n\n\n${p}\n`};
//# sourceMappingURL=graphql-codegen-pydantic.cjs.production.min.js.map
